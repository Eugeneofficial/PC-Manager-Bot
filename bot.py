import os
import json
import logging
import platform
import psutil
import shutil
import socket
import requests
import subprocess
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return None

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("üíª –°–∏—Å—Ç–µ–º–∞"), KeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")],
        [KeyboardButton("üìä –ü—Ä–æ—Ü–µ—Å—Å—ã"), KeyboardButton("üîå –ü–∏—Ç–∞–Ω–∏–µ")],
        [KeyboardButton("üíæ –î–∏—Å–∫–∏"), KeyboardButton("üìÅ –§–∞–π–ª—ã")],
        [KeyboardButton("üì¶ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è"), KeyboardButton("üåê IP –∞–¥—Ä–µ—Å")],
        [KeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ EXE")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_power_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º"""
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="restart"),
            InlineKeyboardButton("‚≠ïÔ∏è –í—ã–∫–ª—é—á–µ–Ω–∏–µ", callback_data="shutdown")
        ],
        [
            InlineKeyboardButton("üò¥ –°–æ–Ω", callback_data="sleep"),
            InlineKeyboardButton("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", callback_data="lock")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    config = load_config()
    if not config or update.effective_user.id not in config.get('AUTHORIZED_USERS', []):
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    await update.message.reply_text(
        "*PC Manager Bot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode='Markdown'
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    config = load_config()
    if not config or update.effective_user.id not in config.get('AUTHORIZED_USERS', []):
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    text = update.message.text
    
    if text == "üíª –°–∏—Å—Ç–µ–º–∞":
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            response = (
                "*–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
                f"üñ• *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* `{platform.platform()}`\n"
                f"‚ö°Ô∏è *–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:* `{platform.processor()}`\n"
                f"üßÆ *–Ø–¥–µ—Ä:* `{psutil.cpu_count()}`\n"
                f"üìä *–ó–∞–≥—Ä—É–∑–∫–∞ CPU:* `{cpu_percent}%`\n\n"
                f"üéÆ *–ü–∞–º—è—Ç—å:*\n"
                f"–í—Å–µ–≥–æ: `{memory.total / (1024**3):.1f} GB`\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{memory.percent}%`\n\n"
                f"üíæ *–î–∏—Å–∫ C:*\n"
                f"–í—Å–µ–≥–æ: `{disk.total / (1024**3):.1f} GB`\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{disk.percent}%`"
            )
            await update.message.reply_text(response, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
    elif text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç":
        try:
            import pyautogui
            screenshot = pyautogui.screenshot()
            screenshot.save("screenshot.png")
            with open("screenshot.png", 'rb') as photo:
                await update.message.reply_photo(photo)
            os.remove("screenshot.png")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
    elif text == "üìä –ü—Ä–æ—Ü–µ—Å—Å—ã":
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    pinfo = proc.info
                    if pinfo['cpu_percent'] > 0:
                        processes.append(pinfo)
                except:
                    pass
                    
            processes.sort(key=lambda x: x['cpu_percent'], reverse=True)
            
            response = "*–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã*\n\n"
            for proc in processes[:10]:
                response += f"üîπ `{proc['name']}`\n" \
                           f"CPU: `{proc['cpu_percent']:.1f}%` | RAM: `{proc['memory_percent']:.1f}%`\n\n"
                           
            await update.message.reply_text(response, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
    elif text == "üîå –ü–∏—Ç–∞–Ω–∏–µ":
        await update.message.reply_text(
            "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_power_keyboard(),
            parse_mode='Markdown'
        )
        
    elif text == "üíæ –î–∏—Å–∫–∏":
        try:
            response = "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö*\n\n"
            for partition in psutil.disk_partitions():
                try:
                    usage = psutil.disk_usage(partition.mountpoint)
                    response += f"üîπ *{partition.device}*\n" \
                               f"–í—Å–µ–≥–æ: `{usage.total / (1024**3):.1f} GB`\n" \
                               f"–°–≤–æ–±–æ–¥–Ω–æ: `{usage.free / (1024**3):.1f} GB`\n" \
                               f"–ó–∞–Ω—è—Ç–æ: `{usage.percent}%`\n\n"
                except:
                    pass
                    
            await update.message.reply_text(response, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
    elif text == "üìÅ –§–∞–π–ª—ã":
        try:
            path = os.getcwd()
            files = os.listdir(path)
            
            response = f"*–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞:* `{path}`\n\n"
            for item in files[:15]:
                if os.path.isdir(os.path.join(path, item)):
                    response += f"üìÅ `{item}/`\n"
                else:
                    response += f"üìÑ `{item}`\n"
                    
            if len(files) > 15:
                response += f"\n...–∏ –µ—â–µ {len(files) - 15} —Ñ–∞–π–ª–æ–≤"
                
            await update.message.reply_text(response, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
    elif text == "üì¶ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `C:\\Files\\MyFolder`",
            parse_mode='Markdown'
        )
        context.user_data['waiting_for'] = 'archive_path'
        
    elif text == "üåê IP –∞–¥—Ä–µ—Å":
        try:
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            external_ip = requests.get('https://api.ipify.org').text
            
            response = (
                "*–°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
                f"üñ• *–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:* `{hostname}`\n"
                f"üè† *–õ–æ–∫–∞–ª—å–Ω—ã–π IP:* `{local_ip}`\n"
                f"üåç *–í–Ω–µ—à–Ω–∏–π IP:* `{external_ip}`"
            )
            await update.message.reply_text(response, parse_mode='Markdown')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
    elif text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ EXE":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Ç—å –∫ EXE —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `C:\\Program Files\\App\\program.exe`",
            parse_mode='Markdown'
        )
        context.user_data['waiting_for'] = 'exe_path'
        
    elif 'waiting_for' in context.user_data:
        if context.user_data['waiting_for'] == 'archive_path':
            if os.path.exists(text) and os.path.isdir(text):
                try:
                    archive_name = f"archive_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
                    archive_path = os.path.join(os.getcwd(), archive_name)
                    shutil.make_archive(archive_path[:-4], 'zip', text)
                    
                    with open(archive_path, 'rb') as f:
                        await update.message.reply_document(f)
                    os.remove(archive_path)
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
            else:
                await update.message.reply_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
        elif context.user_data['waiting_for'] == 'exe_path':
            if os.path.exists(text) and text.lower().endswith('.exe'):
                try:
                    subprocess.Popen(text)
                    await update.message.reply_text("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {str(e)}")
            else:
                await update.message.reply_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è EXE")
                
        del context.user_data['waiting_for']

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "shutdown":
            os.system('shutdown /s /t 1')
            await query.message.reply_text("‚≠ïÔ∏è –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
            
        elif query.data == "restart":
            os.system('shutdown /r /t 1')
            await query.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
            
        elif query.data == "sleep":
            os.system('rundll32.exe powrprof.dll,SetSuspendState 0,1,0')
            await query.message.reply_text("üò¥ –ü–µ—Ä–µ–≤–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
            
        elif query.data == "lock":
            os.system('rundll32.exe user32.dll,LockWorkStation')
            await query.message.reply_text("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
            
    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    config = load_config()
    if not config:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return

    app = Application.builder().token(config['TELEGRAM_TOKEN']).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_handler(CallbackQueryHandler(callback_handler))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
